name: go-todo-app
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  #  paths-ignore:
  #    - '.github/**'
  pull_request:
    branches: [ "main" ]
  workflow_call:
    outputs:
      commit: 
        description: "Short Commit Id"
        value: ${{ jobs.build-and-push.outputs.commit }}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GOTODOAPI_DOCKER_IMAGE: ghcr.io/${{ github.repository }}/go-todo-api
  POSTGRES_DOCKER_IMAGE: ghcr.io/${{ github.repository }}/postgres
  VUETODO_DOCKER_IMAGE: ghcr.io/${{ github.repository }}/vue-todos
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-docker-images:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/actions/login@v1
        with: # Set Azure credentials secret as an input
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: RUN az Command
        run : |
           az account show
           az group list 
     
     
      - name: check golang version
        if: always()
        run: go version

    # running nodejs check because of vue 
      - name: check node version
        run: node -v
     
      - name: docker version and prune
        run: |
            docker -v
            docker image prune -a -f
            docker container prune -f

      - name: Build go-todo-api
        run: |
            cd go-todo-api
            docker build . -f Dockerfile -t $GOTODOAPI_DOCKER_IMAGE
      - name: Build Postgresql
        run: |
            cd postgresql
            docker build . -f Dockerfile -t $POSTGRES_DOCKER_IMAGE
      - name: Build vue-todos
        run: |
            cd vue-todos
            docker build . -f Dockerfile -t $VUETODO_DOCKER_IMAGE

      - if: github.event_name != 'pull_request'
        name: docker login and push all the images
        id: push-image
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          VERSION=${GITHUB_SHA::8}
          echo GOTODOAPI_DOCKER_IMAGE=$GOTODOAPI_DOCKER_IMAGE
          echo VERSION=$VERSION
          docker tag $GOTODOAPI_DOCKER_IMAGE $GOTODOAPI_DOCKER_IMAGE:$VERSION 
          docker push $GOTODOAPI_DOCKER_IMAGE:$VERSION
          docker push $GOTODOAPI_DOCKER_IMAGE
          docker tag $POSTGRES_DOCKER_IMAGE $POSTGRES_DOCKER_IMAGE:$VERSION 
          docker push $POSTGRES_DOCKER_IMAGE:$VERSION
          docker push $POSTGRES_DOCKER_IMAGE
          docker tag $VUETODO_DOCKER_IMAGE $VUETODO_DOCKER_IMAGE:$VERSION 
          docker push $VUETODO_DOCKER_IMAGE:$VERSION
          docker push $VUETODO_DOCKER_IMAGE
         
      - name: listt docker images 
        run: |
           docker images -a
  # deploy-to-aks-dev:
  #   needs: build-docker-images
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps: 
  #     - uses: actions/checkout@v3
  #     - name: Get K8s context
  #       uses: azure/aks-set-context@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}
  #         resource-group: aks-rg
  #         cluster-name: aks-dev-dev
  #       id: login 

  #     - name: Create namespace
  #       run: |
  #         kubectl apply -f manifests/namespace.yaml

  #     - name: Create configmaps and secrets
  #       shell: bash
  #       continue-on-error: true
  #       run: |
        
  #         kubectl create configmap dbhost --from-literal=DATABASE_HOST=${{ secrets.DATABASE_HOST }} -n todolist --dry-run=client -o yaml | kubectl apply -f -
  #         kubectl create secret generic dbuserpass --from-literal=DATABASE_USER=${{ secrets.DATABASE_USER }} --from-literal=DATABASE_PASS=${{ secrets.DATABASE_PASS }} -n todolist --dry-run=client -o yaml | kubectl apply -f -
  #         kubectl create secret  docker-registry ghcr-cred --docker-username=${{ secrets.DOCKER_USER }} --docker-password=${{ secrets.DOCKER_PASSWORD }} --docker-email=${{ secrets.DOCKER_EMAIL}} -n todolist --dry-run=client -o yaml | kubectl apply -f -  
  
      # - uses: Azure/k8s-deploy@v4
      #   with:
      #     namespace: 'todolist'
      #     manifests: |
      #         manifests/postgres.yaml
              
      #     strategy: basic
      #     action: deploy

# This is a basic workflow to help you get started with Actions

name: go-todo-app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
  #  paths-ignore:
  #    - '.github/**'v
  pull_request:
    branches: [ "master" ]

  workflow_call:
    outputs:
      commit: 
        description: "Short Commit Id"
        value: ${{ jobs.build-and-push.outputs.commit }}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  GOTODOAPI_DOCKER_IMAGE: ghcr.io/go-todo-api
  POSTGRES_DOCKER_IMAGE: ghcr.io/postgres
  VUETODO_DOCKER_IMAGE: ghcr.io/vue-todos
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # - name: Azure login
      #   uses: azure/actions/login@v1
      #   with: # Set Azure credentials secret as an input
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: RUN az Command
      #   run : |
      #      az account show
      #      az group list 
     
     
      - name: check golang version
        if: always()
        run: go version

    # running nodejs check because of vue 
      - name: check node version
        run: node -v
     
      - name: docker version
        run: |
            docker -v

      - name: Build go-todo-api
        run: |
            cd go-todo-api
            docker build . -f Dockerfile -t $GOTODOAPI_DOCKER_IMAGE
      - name: Build Postgresql
        run: |
            cd postgresql
            docker build . -f Dockerfile -t $POSTGRES_DOCKER_IMAGE

      - if: github.event_name != 'pull_request'
        name: docker login and push all the images
        id: push-image
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          VERSION=${GITHUB_SHA::8}
          echo GOTODOAPI_DOCKER_IMAGE=$GOTODOAPI_DOCKER_IMAGE
          echo VERSION=$VERSION
          docker tag $GOTODOAPI_DOCKER_IMAGE $GOTODOAPI_DOCKER_IMAGE:$VERSION 
          docker push $GOTODOAPI_DOCKER_IMAGE:$VERSION
          docker push $GOTODOAPI_DOCKER_IMAGE
          docker tag $POSTGRES_DOCKER_IMAGE $POSTGRES_DOCKER_IMAGE:$VERSION 
          docker push $POSTGRES_DOCKER_IMAGE:$VERSION
          docker push $POSTGRES_DOCKER_IMAGE
          echo "::set-output name=commit::$VERSION"
      #       docker images -a
      # - name: docker login and push
      #   run: | 
      #    docker login -u ${{ secrets.dockerhubusername }} -p ${{ secrets.dockerhubpassword }}
      #    docker push danikr238/demo-kotlin2.0
      # - name: Get K8s context
      #   uses: azure/aks-set-context@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     resource-group: aks-rg-dev
      #     cluster-name: aks-cluster-dev
      #   id: login   
  
      # - uses: Azure/k8s-deploy@v3.1
      #   with:
      #     namespace: 'kotlinapp'
      #     manifests: |
      #           manifests
      #     strategy: basic
      #     action: deploy